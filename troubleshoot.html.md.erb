---
title: Troubleshooting
owner: Platform Engineering (KSM Team)
---

<strong><%= modified_date %></strong>

This topic provides platform operators with basic instructions for troubleshooting
<%= vars.product_full %> (<%= vars.product_short %>).


## <a id='errors'></a> Troubleshooting Errors

This section describes solutions for specific troubleshooting errors.

<%# The below partial is in https://github.com/pivotal-cf/docs-partials %>

<%= partial vars.path_to_partials + "/troubleshoot-template", locals: {
    id: 'helm-versions',
    description: 'Incompatible Helm CLI Versions' ,
    symptom: 'When you run <code>ksm offer save</code>, you see an error similar to the following:
    <pre class="terminal"> helm.sh/hook: crd-install found in [Chart1, Chart2....] but no Helm /crds dir; this looks like a Helm 2 only chart </pre>',
    cause:  vars.product_short  + ' supports charts that use the Helm 2 and Helm 3 CLIs.
    However, Helm 2 and Helm 3 use different methods to install Custom Resource Definitions (CRDs).
    <br><br>If a Helm 2 chart does not define CRDs using both methods, adding or
    updating the service offering might fail.',
    solution: 'Define the CRDs in your Helm chart using both the Helm 2 and Helm 3 methods by
    doing the procedure in <a href="./prepare-offer.html#define">Define Custom Resource Definitions</a>.'
} %>

## <a id='techniques'></a> Troubleshooting Techniques

This section describes techniques for troubleshooting.

### <a id='versions'></a>Check <%= vars.product_short %> CLI and Tile Versions

If the version for the <%= vars.product_short %> CLI and tile are not the same,
errors can occur.

To validate that the <%= vars.product_short %> CLI and tile versions match:

1.  Check the <%= vars.product_short %> CLI and tile versions by running:

    ```
    ksm version -t http://ksm.SYSTEM-DOMAIN
    ```
    Where `SYSTEM-DOMAIN` is your <%=vars.app_runtime_full %> system domain URL.
    <br><br>
    For example:
    <pre class="terminal">$ ksm version -t http<span>:</span>//ksm.my-env.com
    Client Version [0.6.40]
    Server Version [0.6.40]
    </pre>

    The value of `Client Version` is the <%= vars.product_short %> CLI version.<br>
    The value of `Server Version` is the <%= vars.product_short %> tile version.

1. If the versions are not the same, do one of the following:
    + **If you want to upgrade the <%= vars.product_short %> CLI,**
      follow the procedure in [Install the <%= vars.product_short %> CLI](./installing.html#ksm).
    + **If you want to upgrade the <%= vars.product_short %> tile,** follow
      the procedure in [Upgrading <%= vars.product_short %>](./upgrading.html).


### <a id='helm'></a> Run Helm Commands

Platform operators can use the `helm` and `kubectl` CLIs for advanced debugging.

To manually run `helm` commands:

1. Target your Kubernetes cluster by following the procedure in
[Retrieving Cluster Credentials and Configuration](https://docs.pivotal.io/pks/cluster-credentials.html).

1. You can run `helm` commands against the cluster targeted in the previous step.
For example:

    ```
    helm list --all-namespaces
    ```

    For more information about Helm commands, see [Helm](https://helm.sh/docs/helm/#helm)
    in the Helm documentation.

### <a id='issue-cleanup'></a> Clean Up a Service Instance
<%= vars.app_runtime_full %> (<%= vars.app_runtime_abbr %>) gives an asynchronously provisioned service instance seven days to become healthy.
In some failure modes, you might have to manually clean up services earlier.

You can use the cf CLI to purge a service instance from <%= vars.app_runtime_full %> (<%= vars.app_runtime_abbr %>).
However, this can leave resources in the Kubernetes cluster.
To fully clean up a service instance, you must delete any remaining namespaces.

For information about purging a service instance,
see [Purge a Service Instance](https://docs.cloudfoundry.org/services/managing-service-brokers.html#purge-a-service-instance)
in the Cloud Foundry documentation.

To delete Helm releases and namespaces in a Kubernetes cluster:

1. Retrieve the names of the remaining namespaces by running:

    ```
    kubectl get namespaces
    ```
1. Record the namespaces that are used by the service instances deployed by <%= vars.product_short %>.<br><br>
    The namespaces are named `ksm-GUID`, where `GUID` is the `service-instance-guid` for the service instance.
    You can view the `service-instance-guid` for a service instance by running `cf service INSTANCE-NAME --guid`.

1. For each namespace, retrieve the Helm release names by running:

    ```
    helm ls --namespace=NAMESPACE
    ```

    Where `NAMESPACE` is the name of the namespace you are deleting.<br><br>
    Record the value in the `NAME` column. This is the release name.
    <p class="note"><strong>Note:</strong> If your service offering has multiple charts,
      the above command might list multiple releases.
    </p>

1. For each namespace and associated Helm release, delete the Helm release by running:

    ```
    helm delete RELEASE --namespace=NAMESPACE
    ```
    Where:
    + `NAMESPACE` is the name of the namespace for the Helm release you are deleting.
    + `RELEASE` is the name of the Helm release you are deleting.
1. For each namespace, delete the namespace by running:

    ```
    kubectl delete namespace NAMESPACE
    ```
    Where `NAMESPACE` is the name of the namespace you are deleting.

### <a id='view-service-instance'></a> View Service Instance Metadata in Kubernetes

When a developer provisions a service instance onto a Kubernetes cluster,
 <%= vars.product_short %> creates a metadata file for the service instance in the cluster.
Platform operators can use this file to determine which <%= vars.app_runtime_abbr %> apps or
services depend on a resource in the Kubernetes cluster.

To view the metadata file:

1. Retrieve the GUID for the service instance by running:

    ```
    cf service SERVICE-INSTANCE --guid
    ```
    Record the output.

1. View the configmap by running:

    ```
    kubectl get configmap ksm-metadata -n ksm-GUID \
    -o go-template --template="{{.data.brokerContext}}"
    ```
    Where `GUID` is the output you recorded above. <br><br>

    For example:

    <pre class="terminal">$ kubectl get configmap ksm-metadata -n ksm-GUID \
-o go-template --template="{{.data.brokerContext}}" <br>
      {
        "platform": "myplatform",
        "organization_guid": "a12345b6-cf17-4109-aefb-0510d09d1374",
        "space_guid": "zyx9u8765-e6c2-4a52-861f-1b0663cf6524",
        "organization_name": "myorg",
        "space_name": "myspace",
        "instance_name": "mydb"
      }</pre>

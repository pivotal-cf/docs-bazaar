---
title: Configuring a Helm Chart
owner: Platform Engineering (TSMGR Team)
---

<strong><%= modified_date %></strong>

This topic describes how to configure a Helm chart for <%= vars.product_full %>
(<%= vars.product_short %>).

## <a id='using'></a> Overview

<%= vars.product_short %> enables platform operators to offer Helm charts as
on-demand services to developers on <%= vars.app_runtime_full %> (<%= vars.app_runtime_abbr %>).
<%= vars.product_short %> uses the description in `Chart.yaml` as the description
of the offer in `cf marketplace`.

<%= vars.product_short %> surfaces all values specified in the `values.schema.json`
file to the developer at the time of provision through Apps Manager.
For more information about schema files, see the
[Helm documentation](https://helm.sh/docs/topics/charts/#schema-files).
Given that the cf CLI does not enforce the schema during provision, developers can
also override the Helm chart's values file by using the `-c` flag when they provision
a service instance.
For more information, see [Provision a Service Instance](./using.html#provision).

Before you add a service offering to `cf marketplace`, you must configure your
Helm charts to be compatible with <%= vars.product_short %>.
For examples of <%= vars.product_short %>-compatible charts, see
[<%= vars.product_cli %>-sample](https://github.com/cf-platform-eng/tsmgr-samples)
on GitHub.

To configure a Helm chart to be compatible with <%= vars.product_short %>:

1. Override values in the chart `values.yaml` file. See [Override Chart Values](#override) below.

1. If you are using Helm 2 charts, define Custom Resource Definitions (CRDs) using Helm 2 and Helm 3
methods. See [Define Custom Resource Definitions](#crd) below.

    <p class="note">
      <strong>Note:</strong> Helm 3 handles CRDs differently from other Kubernetes Resources.
      For information about best practices for using CRDs, see the
      <a href="https://helm.sh/docs/chart_best_practices/custom_resource_definitions/">Helm documentation</a>.
    </p>

1. Prevent secret regeneration for Helm charts with secret pattern definitions.
See [Prevent Secret Regeneration](#secret-regeneration) below.

VMware recommends that you read the following resources when creating your Helm chart:

+ For information about creating your first Helm chart, see the
[Bitnami documentation](https://docs.bitnami.com/kubernetes/how-to/create-your-first-helm-chart/).
+ For information about best practices for creating production-ready Helm charts,
see the [Bitnami documentation](https://docs.bitnami.com/tutorials/production-ready-charts/).
+ For more information about best practices,
see the [Helm documentation](https://helm.sh/docs/topics/chart_best_practices/).


## <a id='override'></a> Override Chart Values

To ensure that your chart is compatible with <%= vars.product_short %>,
you might need to override specific values in <code>values.yaml</code>.

You must follow the procedure in this section if your chart uses any of the following properties:

+ `storageClass`
+ `services.type`
+ `hosts.name`

You can choose to override other properties defined in the chart `values.yaml` by adding those
properties to an `OVERRIDE-FILE.yaml` file.

<p class="note warning">
  <strong>Warning:</strong> You cannot change the chart name or resize a PersistentVolumeClaim after
  you add the service offering to <%= vars.product_short %>.
</p>

Below are some common scenarios where overriding chart values is required.

1. Edit your override file to configure storage. Edit the `storageClass:` value to correspond to
the StorageClass name for your configured <%= vars.k8s_runtime_full %> cluster.
The default name for <%= vars.k8s_runtime_abbr %> is `standard`.
For more information, see
[Configuring and Using PersistentVolumes](https://docs.pivotal.io/runtimes/pks/volumes.html).
<br><br>For example:

    ```yaml
    ...
    persistence:
      enabled: true
      storageClass: "standard"
      ...
    ```

1. Edit your override file to enable service access.
<%= vars.product_short %> supports using a load balancer, Ingress, or ExternalDNS to access services.
    + **If want your service to be accessed directly using a load balancer,** set
    `services.type:` to `LoadBalancer`. For example:

        ```yaml
        ...
        service:
          type: LoadBalancer
          port: 3306
        ...
        ```
    + **If want your service to be accessed using Ingress or ExternalDNS:**
    Edit the value of the `hosts.name` to include a templatized value for uniqueness.
    For example:

        ```yaml
        ...
        ingress:
          enabled: true
          hosts:
          - name: "{{ .Release.Name }}.example.com"
        ...
        ```

    For more information, see [(Optional) Template Values](#values-templating).

    <p class="note">
      <strong>Note:</strong> The Ingress controller or ExternalDNS controller need to be installed
      and configured manually.<br><br>
      For information about Ingress, see the
      <a href="https://kubernetes.io/docs/concepts/services-networking/ingress/">Kubernetes documentation</a>.
      For information about ExternalDNS, see
      <a href="https://github.com/kubernetes-incubator/external-dns">external-dns</a> in GitHub.
    </p>

1. Edit the `<%= vars.product_cli %>.yaml` file to use the override file you created in step 1.
<br><br>
For example:

    ```yaml
    offer-name: OFFER-NAME
    charts:
      - chart: CHART-NAME
        version: CHART-VERSION-NUMBER
        offered: OFFERED-VALUE
        scope: SCOPE-VALUE
        overrideValuesFile: OVERRIDE-FILE
    ```
    For information about the properties used in `<%= vars.product_cli %>.yaml`,
    see [(Optional) Create <%= vars.product_cli %>.yaml](./prepare-offer.html#yaml).


## <a id='crd'></a> Define Custom Resource Definitions

<%= vars.product_short %> supports charts that use the Helm 2 and Helm 3 CLIs.
Helm 2 and Helm 3 use different methods to install CRDs. <%= vars.product_short %> requires Helm 3,
while Helm 2 is optional.

If you are using a Helm 2 chart, use both the Helm 2 and Helm 3 CLIs methods:

1. Define your CRDs using the Helm 3 method by referring to the
[Helm 3 documentation](https://helm.sh/docs/topics/chart_best_practices/custom_resource_definitions/#install-a-crd-declaration-before-using-the-resource). Helm 3 uses a `crds` directory to install CRDs.

1. Define your CRDs using the Helm 2 method by referring to the
[Helm 2 documentation](https://v2.helm.sh/docs/charts_hooks/#defining-a-crd-with-the-crd-install-hook).
Helm 2 uses a hook annotation to install CRDs.


## <a id='secret-regeneration'></a> Prevent Secret Regeneration

When Helm charts use secret patterns, the secrets regenerate on upgrade by default.
Many services do not support secret regeneration.

VMware recommends configuring your Helm chart to prevent secret regeneration where it defines secret
patterns.

To prevent secret regeneration:

1. Search your Helm chart for a line containing `randAlphaNum`. For example:

    ```
    mysql-root-password: {{ randAlphaNum 10 | b64enc | quote }}
    ```

1. If a file contains `randAlphaNum`, add the following in the same file:

    ```yaml
    metadata:
      annotations:
        "helm.sh/hook": "pre-install"
        "helm.sh/hook-delete-policy": "before-hook-creation"
    ```

For more information about this issue, see
[Random passwords change on upgrade](https://github.com/helm/charts/issues/5167) in GitHub.


## <a id='values-templating'></a> (Optional) Template Values

Helm uses the literal contents of a `values.yaml` file as the concrete set of substitutions when
creating a release.
In the context of <%= vars.product_short %>, this is the plan and override file contents.
However, <%= vars.product_short %> uses these values as a template for multiple releases.

This difference can create cases where values need to go through the Helm templating engine before
any template files in the `/templates` directory are rendered with those values.

Plan and override file contents might need to go through the Helm templating engine when:

* A chart uses Ingress controller. For more information about Ingress, see the
[Kubernetes documentation](https://kubernetes.io/docs/concepts/services-networking/ingress/).
* There is a unique name, in addition to the release name, required in a chart.

<%= vars.product_short %> runs these values through the Helm templating engine.
For example, in a chart with ingress hosts, you can edit the plan or override file to use the release
name as the unique subdomain discriminator in the ingress definition:

```yaml
...
ingress:
  enabled: true
  hosts:
  - name: "{{ .Release.Name }}.example.com"
...
```

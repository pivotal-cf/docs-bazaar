---
title: Architecture
owner: Platform Engineering (KSM Team)
---
<strong><%= modified_date %></strong>

This topic describes <%= vars.product_full %> (<%= vars.product_short %>) components, architecture, and technical detail.

##<a id='overview'></a> Overview

<%= vars.product_short %> is a collection of components running on a BOSH-deployed
VM that communicates with both Kubernetes clusters and <%= vars.app_runtime_full %> (<%= vars.app_runtime_abbr %>).

The following diagram describes how <%= vars.product_short %> communicates with
<%= vars.app_runtime_abbr %> and a Kubernetes cluster:

<a href="images/reference_architecture.png" target="_blank">
    <img src="images/reference_architecture.png" alt="<%= vars.product_short %> reference architecture">
</a>

<a href="images/reference_architecture.png" target="_blank"> View a larger version of this diagram.</a>

<%# The above diagram should probably be simplified or split up.
It is hard to follow and read since the text is small.
We also should write more text below that explains or describes the diagram
in more detail for clarity/accessibility reasons. %>

##<a id='components'></a> <%= vars.product_short %> Components

<%= vars.product_short %> contains the following components:

* [<%= vars.product_short %> Daemon](#ksm-d)
* [<%= vars.product_short %> Broker](#ksm-broker)

###<a id='ksm-d'></a> <%= vars.product_short %> Daemon

The <%= vars.product_short %> daemon (ksm-d) provides the API that the
<%= vars.product_short %> Command Line Interface (CLI) communicates with.
When a platform operator adds a service offering using the <%= vars.product_short %> CLI,
ksm-d validates the Helm chart and stores it in ChartMuseum. For information about ChartMuseum,
see the [chartmuseum](https://github.com/helm/chartmuseum) repository on GitHub.

If you provide a `ksm.yaml` file with the service offering, ksm-d stores
the file in a configured S3-compatible bucket. For more information about the `ksm.yaml` file,
see [(Optional) Offer Multiple Charts in a Single Offering](./prepare-offer.html#multiple-charts).

###<a id='ksm-broker'></a> <%= vars.product_short %> Broker

The <%= vars.product_short %> broker is an Open Service Broker that creates
dedicated service instances in a Kubernetes cluster.
When a <%= vars.app_runtime_full %> (<%= vars.app_runtime_abbr %>) developer runs `cf create-service`
Cloud Controller sends that request to the broker. The broker then deploys
the Helm chart needed for the service.

For more information about Open Service Brokers,
see [Open Service Broker](https://www.openservicebrokerapi.org/).

For more
information about the `cf create-service` command,
see [Creating Service Instances](https://docs.cloudfoundry.org/devguide/services/managing-services.html#create)
in the Cloud Foundry documentation.
<%# In the diagram, this referred to as the Broker Kibsoh. The diagram should probably
say KSM Broker bc "The KSM broker is a superset of the open source Kibosh broker
and has additional functionality." %>
##<a id='resources'></a> <%= vars.product_short %> Resources

<%= vars.product_short %> uses the following external resources:

* [S3-Compatible Bucket](#bucket)
* [Kubernetes Clusters](#clusters)


### <a id='bucket'></a> S3-Compatible Bucket
<%= vars.product_short %> uses an external S3-compatible bucket to store the state of
ChartMuseum, the <%= vars.product_short %> daemon, and the <%= vars.product_short %> broker.
The <%= vars.product_short %> daemon and <%= vars.product_short %> broker use
this bucket to persist their caches.

For instructions for configuring an external S3-compatible bucket
for <%= vars.product_short %>, see [Configure Storage](./installing.html#storage).

### <a id='clusters'></a> Kubernetes Clusters

<%= vars.product_short %> is backed by at least one default Kubernetes cluster.

You can use different service offering plans to configure different types of clusters.
For example, you could configure a large default cluster for more ephemeral
service instances used in development.
You could also configure another cluster with workload specialization for specific service plans.

For instructions about configuring a default Kubernetes cluster,
see [Managing Clusters](./managing-clusters.html).

## <a id='life-cycle'></a> <%= vars.product_short %> Life Cycle

This section outlines what happens when a <%= vars.app_runtime_abbr %> developer uses the
Cloud Foundry Command Line Interface (cf CLI) to create, bind,
update, unbind, and delete service instances with <%= vars.product_short %>.

For information about the cf CLI,
see [Managing Service Instances with the cf CLI](https://docs.cloudfoundry.org/devguide/services/managing-services.html)
in the Cloud Foundry documentation.

###<a id='create'></a> Create

When a <%= vars.app_runtime_abbr %>  developer runs `cf create-service`, <%= vars.product_short %>
deploys Helm charts into the Kubernetes cluster.

If your service offering
has multiple charts, <%= vars.product_short %> loops through the list of charts and does the following for each chart:

1. Checks the scope for the chart. A chart can have either a `cluster` or `namespace` scope. See [Cluster and Namespace Scopes](#cluster-namespace) below.
2. Deploys the chart into the Kubernetes cluster. The chart is deployed in a namespace defined by the chart scope.
1. Waits for the deployment to succeed. <%= vars.product_short %> does not deploy subsequent charts until the previous chart is fully installed.

For instructions about offering multiple charts in a single offering, see
[(Optional) Offer Multiple Charts in a Single Offering](./prepare-offer.html#multiple-charts). <br><br>

If <%= vars.product_short %> is configured with a private container registry,
when <%= vars.product_short %> deploys a chart, it also does the following:

1. Changes the image reference in the chart to pull from your configured private container registry.
1. Adds a secret containing the private container registry credentials to the namespace.
This secret enables <%= vars.product_short %> to pull the image.

For instructions about configuring a private container registry,
see [Load Container Images into a Private Container Registry](./prepare-offer.html#images).

####<a id='cluster-namespace'></a> Cluster and Namespace Scopes

When <%= vars.product_short %> checks the scope for a Helm chart,
<%= vars.product_short %>  creates a namespace based on the following:

+ **If the chart has the `cluster` scope,** <%= vars.product_short %>
creates a namespace named `ksm-CHART`, where `CHART` is the name of the chart.
+ **If a chart has the `namespace` scope,** <%= vars.product_short %> creates a namespace named `ksm-GUID`, where `GUID` is the `service-instance-guid` for the service instance.

<p class="note"><strong>Note:</strong> If a chart has the <code>cluster</code> scope
  and the namespace for the chart is already present, <%= vars.product_short %> does not add the chart.
</p>

<%= vars.product_short %> does not internally track the identifiers for namespaces.
It uses the predictable namespace names to find resources in the Kubernetes cluster.

###<a id='bind'></a> Bind

When a <%= vars.app_runtime_abbr %> developer runs `cf bind-service`,
<%= vars.product_short %> retrieves the `services` and `secrets` credentials for the service offering.
The retrieved credentials are serialized as JSON and stored in <%= vars.app_runtime_abbr %> CredHub.
The bound app is given permissions to read the newly created CredHub variable.
<%# Not to docs folks: to be technically accurate, this needs to be TAS Credhub be platform or something generic %>

<%= vars.product_short %> passes these credentials to CredHub as follows:

+ **If the Helm chart for the service offering includes a bind template,**
`services` and `secrets` are processed by the template and the resulting credentials are used
for the bind. For instructions about creating a bind template,
see [(Optional) Create Binding Template for App Consumption](./prepare-offer.html#env).

+ **If the chart does not include a bind template,** `services` and `secrets` are used directly as credentials.

For information about CredHub, see [CredHub](https://docs.pivotal.io/pivotalcf/2-6/credhub/).

###<a id='update'></a> Update

When a <%= vars.app_runtime_abbr %>  developer runs `cf update-service`, <%= vars.product_short %> triggers
the upgrade cycle for Helm. For information about the Helm upgrade cycle,
see [helm upgrade](https://github.com/helm/helm/blob/master/docs/helm/helm_upgrade.md) on GitHub.

You can use the `cf update-service` command to add or modify configuration parameters using the `-c`
flag. The update uses existing values, which means you do not need to resend configuration parameters.
The update also does not upgrade the Helm chart to a newer version.

###<a id='unbind'></a> Unbind

When a <%= vars.app_runtime_abbr %>  developer runs `cf unbind-service`, deletes the CredHub variables that
were created when the service was bound your app. See [Bind](#bind) above.

###<a id='delete'></a> Delete

When a <%= vars.app_runtime_abbr %>  developer runs `cf delete-service`, <%= vars.product_short %> does the
following:

* Deletes each Helm chart with the `namespace` scope.
* Deletes the namespace for each chart with the `namespace` scope.
* Takes no action on charts with the `cluster` scope.

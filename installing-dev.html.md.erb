---
title: Installing and Configuring Tanzu Service Manager in Development Mode
owner: Platform Engineering (TSMGR Team)
---
<strong><%= modified_date %></strong>

This topic describes how to install and configure <%= vars.product_full %>
(<%= vars.product_short %>) for development using Helm.

<p class="note">
  <strong>Note:</strong> This topic describes how to quickly install
  <%= vars.product_short %> for the purpose of testing or learning.
  This is <strong>NOT SECURE FOR PRODUCTION</strong>. For production installation, see
  <a href="installing.html">Installing and Configuring <%= vars.product_full %></a>.
</p>


## <a id="overview"></a> Overview

Helm is a Kubernetes open-source package manager.
You can use a Helm chart to install and configure <%= vars.product_short %>.

To install and configure <%= vars.product_short %> using Helm:

1. [Get <%= vars.product_short %> Resources from <%= vars.product_network %>](#get)

1. [Install the <%= vars.product_short %> CLI](#cli)

1. [Configure the <%= vars.product_short %> Helm Chart](#configure)

1. [Install the Helm Chart](#install)


## <a id="prereq"></a> Prerequisites

Before you install <%= vars.product_short %> using Helm, you need:

* **Helm CLI v3.2.4 or later:** For information about installing the Helm CLI,
see the [Helm documentation](https://helm.sh/docs/intro/install/).

* **Docker CLI:** For information about installing Docker, see the
[Docker documentation](https://docs.docker.com/get-docker/).

* **<%= vars.app_runtime_abbr %> Deployment:** A running <%= vars.app_runtime_abbr %> deployment.

* **A Kubernetes Cluster:** A running Kubernetes cluster. <%= vars.product_short %> supports
<%= vars.k8s_runtime_full %> clusters.
For supported cluster versions, see the [Product Snapshot](index.html#snapshot).
For information about <%= vars.k8s_runtime_abbr %>, see
[<%= vars.k8s_runtime_full %>](https://docs.pivotal.io/pks/index.html).

* **Kubernetes CLI:** For more information, see the
[Kubernetes documentation](https://kubernetes.io/docs/tasks/tools/install-kubectl/).

* **Private Container Image Registry:** You need this to manage container images in air-gapped
environments.
VMware recommends using a registry in production deployments. You can use a registry such as
[Harbor](https://network.pivotal.io/products/harbor-container-registry).

* **A default StorageClass on the cluster where you want to install <%= vars.product_short %>:**
If you are using <%= vars.k8s_runtime_abbr %>, see
[Specify a Default StorageClass](https://docs.pivotal.io/tkgi/volumes.html#default-storage-class).
For more information about storage classes, see the
[Kubernetes documentation](https://kubernetes.io/docs/concepts/storage/storage-classes/).

* **Cloud Foundry CLI (cf CLI):** To download the cf CLI,
  see [Cloud Foundry CLI](https://github.com/cloudfoundry/cli) in GitHub.
  Although, the cf CLI is not required for the procedures in this topic,
  it is required to give developers access to services.
  See [Using Services with Tanzu Service Manager](using.html).


## <a id="choose-install"></a> Choose an Installation Method

There are two methods for installing the <%= vars.product_short %> environment:

* [Install Using the `install-dev.sh` Script](#install-dev): The `install-dev.sh` script automates
the installation steps. This option only requires you to download files and provide private registry
endpoint, username, and password.

* [Install Manually](#install-manually): This option requires more input from you, but gives you
more visibility into the process.


## <a id="install-dev"></a> Install Using the install-dev.sh Script

To install using the `install-dev.sh` script:

1. Download artifacts from [<%= vars.product_network %>](https://network.pivotal.io/products/tanzu-service-manager) to an empty directory:
    * **The <%= vars.product_short %> Command Line Interface (CLI):** Click **CLIs** and download
    the CLI for your operating system.
    * **<%= vars.product_short %> Helm chart TGZ file:** Click
    **Helm Chart for <%= vars.product_short %>** and download the Helm chart TGZ file.
    * **install-dev.sh script**: Click **<%= vars.product_short %> Dev Environment Installer** and
    download the `install-dev.sh` file.
    
1. Run `docker login registry.pivotal.io` so that the script can pull the installation images.
   The credentials are the same as the <%= vars.product_network %> credentials.

1. Make the `install-dev.sh` file executable by running:

    ```
    chmod +x install-dev.sh
    ```

1. For the private image registry that you will use to upload the Docker installation images,
   verify and record the following:
   + Endpoint
   + Username
   + Password

1. Provide the registry endpoint, username, and password during the installation by doing one of these
methods:
    * Run
        ```
        ./install-dev.sh
        ```
        and then answer the registry details questions, or
    * Create a `registry.yaml` file containing the needed information.
    See an example `registry.yaml` template below:

        ```yaml
        registry: MY-REGISTRY-ENDPOINT/PROJECT/REPOSITORY
        username: USERNAME
        password: PASSWORD
        ```

        and then run:

        ```
        install-dev.sh registry.yaml
        ```

1. Monitor the provisioning of the external IP addresses for the daemon and broker services by
running:

    ```
    kubectl get services -n sm
    ```

1. After the external IP address is available for the daemon, configure the <%= vars.product_short %>
environment variables by running:

    ```
    source ./set-sm-env.sh
    ```

1. After the external IP address is available for the broker, you can configure
<%= vars.product_short %> for Cloud Foundry by running the following script:

    ```bash
    ./set-cf-details.sh BROKER-NAME CF-API-ENDPOINT CF-USERNAME CF-PASSWORD
    ```
    Where:
    + `BROKER-NAME` is a name you provide to your broker to be identified in Cloud Foundry.
    + `CF-API-ENDPOINT` is the Cloud Foundry endpoint. To verify that, run the `cf target` command.
    + `CF-USERNAME` is the username for a <%= vars.app_runtime_abbr %> account with
    `cloud_controller.admin` permissions. For example: `.uaa.admin_credentials`.
    + `CF-PASSWORD` is the password for the <%= vars.app_runtime_abbr %> account.

1. Test the <%= vars.product_short %> by running either:

    ```
    <%= vars.product_cli %> version
    ```

    or

    ```
    <%= vars.product_cli %> offer list
    ```


## <a id='install-manually'></a> Install Manually

To install <%= vars.product_short %> manually, follow the procedures below:

1. <a href='#get'> Get <%= vars.product_short %> Resources from <%= vars.product_network %></a>
1. <a href='#cli'> Install the <%= vars.product_short %> CLI</a>
1. <a href='#configure'> Configure the <%= vars.product_short %> Helm Chart</a>
1. <a href='#install'> Install the <%= vars.product_short %> Helm Chart</a>
1. <a href='#configure-for-cf'> Configure <%= vars.product_short %> for Cloud Foundry</a>

### <a id='get'></a> Get <%= vars.product_short %> Resources from <%= vars.product_network %>

To get the resources needed from <%= vars.product_network %> to install <%= vars.product_short %>:

1. Go to [<%= vars.product_network %>](https://network.pivotal.io/products/tanzu-service-manager).

1. Sign in, if you are not already signed in.

1. Get the following resources:
    + **The <%= vars.product_short %> Command Line Interface (CLI):** Click **CLIs** and download
    the CLI for your operating system.
    + **<%= vars.product_short %> Helm chart TGZ file:** Click
    **<%= vars.product_cli %>-VERSION-NUMBER.tgz** and download the Helm chart for
    <%= vars.product_short %>.
    + **values-dev.yaml file:** Download the `values-dev.yaml` override configuration file.


### <a id='cli'></a> Install the <%= vars.product_short %> CLI

To install the <%= vars.product_short %> Command Line Interface (CLI):

1. Rename the downloaded <%= vars.product_short %> CLI file as `<%= vars.product_cli %>`.

1. Make the <%= vars.product_short %> binary file act as an executable file by running:

    ```bash
    chmod +x <%= vars.product_cli %>
    ```

1. Move the binary file into your `PATH` by running:

    ```bash
    mv <%= vars.product_cli %> /usr/local/bin/<%= vars.product_cli %>
    ```

1. Ensure <%= vars.product_short %> CLI is properly working by running:

    ```bash
    <%= vars.product_cli %> version
    ```


### <a id='configure'></a> Configure the <%= vars.product_short %> Helm Chart

<p class="note">
  <strong>Note:</strong> To see a detailed description of each value and its default, run:
  <code>helm show values <%= vars.product_cli %>-VERSION-NUMBER.tgz</code>
</p>

To configure the <%= vars.product_short %>, edit the `values-dev.yaml` file:

1. Add the credentials for the <%= vars.product_network %> registry:

    ```yaml
    imageCredentialsFor<%= vars.product_short %>Images:
     registry: registry.pivotal.io
     username: REGISTRY-USERNAME
     password: REGISTRY-PASSWORD
    ```
    Where:
    + `REGISTRY-USERNAME` is your <%= vars.product_network %> username.
    + `REGISTRY-PASSWORD` is your <%= vars.product_network %> password.

1. (Recommended) Set unique passwords:

    The `values-dev.yaml` is pre-configured with default passwords, but VMware recommends changing
    them to unique passwords in these sections:

    ```yaml
    broker:
      password: DevPassword
    ```

    ```yaml
    daemon:
      password: DevPassword
    ```

    ```yaml
    chartmuseum:
      env:
        open:
          BASIC_AUTH_PASS: "chartpass"
    ```

    ```yaml
    minio:
      accessKey:
        password: DevPassword
      secretKey:
        password: DevPassword
    ```


### <a id='install'></a> Install the <%= vars.product_short %> Helm Chart

To install the <%= vars.product_short %> Helm chart:

1. From the root level of the chart, install the <%= vars.product_short %> Helm chart by running:

    ```bash
    kubectl create ns <%= vars.product_short %>-NAMESPACE
    ```
    ```
    helm install RELEASE-NAME <%= vars.product_cli %>-VERSION-NUMBER.tgz  -n <%= vars.product_short %>-NAMESPACE --wait -f values-dev.yaml
    ```
    Where:
    + `<%= vars.product_short %>-NAMESPACE` is a name you choose for the <%= vars.product_short %>
       dedicated namespace.
    + `RELEASE-NAME` is a name you choose for the release.
       Helm release names must begin and end with lowercase alphanumeric characters and can only
       contain lowercase alphanumeric characters and hyphens.
    + `<%= vars.product_cli %>-VERSION-NUMBER.tgz` is the <%= vars.product_short %> Helm Chart file
       you downloaded earlier.


### <a id='configure-for-cf'></a> Configure <%= vars.product_short %> for Cloud Foundry

To configure <%= vars.product_short %> for Cloud Foundry:

1. Retrieve the broker IP address:
    * **If the Kubernetes provider is not host-based, run:**

        ```bash
        export BROKER_IP=$(kubectl get service RELEASE-NAME-<%= vars.product_cli %>-broker -n
        <%= vars.product_short %>-NAMESPACE -o=jsonpath='{@.status.loadBalancer.ingress[0].ip}')
        ```
    * **If the Kubernetes provider is host-based, such as Amazon's EKS, run:**

        ```bash
        export BROKER_IP=$(kubectl get service RELEASE-NAME-<%= vars.product_cli %>-broker -n
        <%= vars.product_short %>-NAMESPACE -o=jsonpath='{@.status.loadBalancer.ingress[0].hostname}'
        ```

1. Upgrade your <%= vars.product_short %> Helm release by running:

    ```bash
    helm upgrade RELEASE-NAME <%= vars.product_cli %>-VERSION-NUMBER.tgz --reuse-values \
      --set cf.brokerUrl="http://${BROKER_IP}" \
      --set cf.brokerName=<%= vars.product_cli %> \
      --set cf.apiAddress=http://api.SYSTEM-DOMAIN \
      --set cf.username=CF-USERNAME \
      --set cf.password=CF-PASSWORD \
      --set cf.skipSslValidation=true \
      -n <%= vars.product_short %>-NAMESPACE
    ```
    Where:
    + `RELEASE-NAME` is the name of the release.
    + `SYSTEM-DOMAIN` is the system domain for <%= vars.app_runtime_abbr %>.
    + `CF-USERNAME` is the username for a <%= vars.app_runtime_abbr %> account
       with `cloud_controller.admin` permissions, such as the `.uaa.admin_credentials`.
    + `CF-PASSWORD` is the password for the <%= vars.app_runtime_abbr %> account.
    + `<%= vars.product_short %>-NAMESPACE` is a name you choose for the <%= vars.product_short %>
       dedicated namespace.

<p class="note">
  <strong>Note:</strong> You can verify <code>cf.apiAddress</code> by running the <code>cf target</code> command.
</p>

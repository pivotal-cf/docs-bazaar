---
title: Using KSM
owner: Platform Engineering (KSM Team)
---

<strong><%= modified_date %></strong>

This topic describes how to use <%= vars.product_full %> (<%= vars.product_short %>).

##<a id='using'></a> Overview

<%= vars.product_short %> uses the <%= vars.product_short %> (Command Line Interface) CLI and a generic broker deployed by the tile.
You can use <%= vars.product_short %> to do the following:

+ Offer on-demand provisioning of a dedicated service instance for developers through `cf marketplace`.
+ Create a catalog of services with customizable plans that can be deployed on multiple clusters.

To add a service offering:

1. Retrieve the credentials needed to use the <%= vars.product_short %> CLI. <br>
See [Retrieve Credentials for <%= vars.product_short %>](#credentials) below.
1. Package your Helm chart and add the chart to <%= vars.product_short %>. <br>
See [Add a Service Offering to <%= vars.product_short %>](#add) below.
1. Enable access to the service offering for your developers to use. <br>
See [Enable Service Offering Access](#enable) below.

##<a id="prereq"></a>Prerequisites

Before you deploy a service offering, you must configure the service offering.
See [Preparing a Service Offering](./prepare-offer.html).


## <a id="credentials"></a> Retrieve Credentials for <%= vars.product_short %>

To use the <%= vars.product_short %> CLI, you need to retrieve your KSM API credentials.

To retrieve your <%= vars.product_short %> API Credentials:

1. Navigate to the **<%= vars.ops_manager %> Installation Dashboard** >
**<%= vars.product_full %> (<%= vars.product_short %>)** > **Credentials**.

1. Retrieve your **<%= vars.product_short %> API Credentials** by clicking **Link to Credentials**.

1. Configure environment variables by running the following commands:

    ```
    export KSM_TARGET=http://ksm.SYSTEM-DOMAIN
    export KSM_USER=USERNAME
    export KSM_PASSWORD=PASSWORD
    export KSM_INSECURE=true
    ```
    Where:
    + `SYSTEM-DOMAIN` is your <%= vars.app_runtime_full %> system domain URL.
    + `USERNAME` is the value of `identity` you recorded in the above step.
    + `PASSWORD` is the value of `password` you recorded in the above step.

    <p class="note"><strong>Note:</strong> <%= vars.product_short %> uses the above environment
    variables to set credentials and target your deployment.
    <code>KSM_INSECURE=true</code> enables <%= vars.product_short %> to ignore
     certificate validation.
     </p>

1. Validate the credentials for <%= vars.product_short %> by running:

    ```
    ksm offer list
    ```

## <a id="add"></a> Add a Service Offering to <%= vars.product_short %>

You must package your Helm charts and add the offering to <%= vars.product_short %> to enable developers
to use the service.

To add your offering to <%= vars.product_short %>:

1. Package your Helm chart by running the following command from the root level of
your Helm chart directory:

    ```
    helm package .
    ```

    Verify that you now have a file named `CHART-NAME-#.#.#.tgz` in the root level of your
    Helm chart directory.

1. Add your Helm charts as a dedicated instance service offering to <%= vars.product_short %>
by doing one of the following:
    + **If you are adding a single chart,** run:

        ```
        ksm offer save /PATH-TO-YOUR-CHART.tgz
        ```
        Where `PATH-TO-YOUR-CHART.tgz` is the path to the packaged chart you created in the above step.<br><br>
    + **If you are adding multiple charts,** run:

        ```
        ksm offer save /PATH-TO-KSM-DIRECTORY/ /PATH-TO-YOUR-CHART_1.tgz /PATH-TO-YOUR-CHART_2.tgz
        ```
        Where:

        + `PATH-TO-KSM-DIRECTORY/` is the path to the `ksm` directory that includes the `ksm.yaml`
            file for your service offering.
        + `PATH-TO-YOUR-CHART_1.tgz` is the path to a packaged chart you referenced in your `ksm.yaml` file.
        + `PATH-TO-YOUR-CHART_2.tgz` is the path to a packaged chart you referenced in your `ksm.yaml` file.

        <p class="note"><strong>Note:</strong>
          If you have already added a packaged chart to <%= vars.product_short %>,
            you do not need to provide the path to the same chart when you
            subsequently add service offerings.
        </p>
        For more information about offering multiple charts,
        see [(Optional) Offer Multiple Charts in a Single Offering](./prepare-offer.html#multiple-charts).

    <p class="note"><strong>Note:</strong>
      If the Helm chart version specified in <code>ksm.yaml</code>
      and <code>Chart.yaml</code> do not match, <%= vars.product_short %>
      returns a error message similar to the following:
      <code>Error: The offer yaml version [2.3.0] for chart [mysql] does not match the version [1.3.0] in chart</code>
    </p>
1. Ensure your offering has been saved to <%= vars.product_short %> by running:

    ```
    ksm offer list
    ```

## <a id="enable"></a> Enable Service Offering Access

After you add your service offering, you must enable access to the service offering.

To enable access to your service offering:

1. Log in to your <%= vars.app_runtime_full %> (<%= vars.app_runtime_abbr %>) deployment by running:

    ```
    cf login -a API-URL -u USERNAME -p PASSWORD
    ```

    Where:
    + `API-URL` is the API endpoint for your <%= vars.app_runtime_abbr %> instance.
    + `USERNAME` is your username for your <%= vars.app_runtime_abbr %> instance.
    + `PASSWORD` is your password for your <%= vars.app_runtime_abbr %> instance.

    For more information,
    see [Getting Started with the cf CLI](https://docs.pivotal.io/pivotalcf/2-4/cf-cli/getting-started.html#login).

1. Enable access to the service for all orgs by running:

    ```
    cf enable-service-access SERVICE-NAME
    ```
    Where `SERVICE-NAME` is the name of the new service that you viewed in step 6 of
    [Add a Service Offering to <%= vars.product_short %>](#add) above.


1. View the newly created service plan by running:

    ```
    cf marketplace
    ```

## <a id="update-offering"></a> Update a Service Offering

When you update a service offering in <%= vars.product_short %>, any newly-created service instances
use the latest version of the service offering.
Existing instances must be upgraded using the Cloud Foundry Command Line Interface (cf CLI).
See [Upgrade a Service Instance](#upgrade-instance) below.

To update a service offering in  <%= vars.product_short %>:

1. For each chart you are updating, after you edit your Helm chart,
  increment the chart version in `Chart.yaml`.
1. If you have a `ksm.yaml` file for your service offering,
  update the chart versions in `ksm.yaml` to match the the version in `Chart.yaml`.
  For more information about multiple charts and `ksm.yaml`,
    see [(Optional) Offer Multiple Charts in a Single Offering](./prepare-offer.html#multiple-charts).
1. If any of your charts include modified Custom Resource Definitions (CRDs),
  for each CRD manifest, manually apply the changes to the cluster by running:

      ```
      kubectl apply -f PATH-TO-CRD-MANIFEST.yaml
      ```
      Where:
      + `PATH-TO-CRD-MANIFEST.yaml` is the path to the CRD manifest.
      The CRD manifest is in the `crds` directory in the chart.
      <p class="note"><strong>Note:</strong>
      By default, <%= vars.product_short %> rejects an updated service offering with any CRD changes in the chart.
      This is because <%= vars.product_short %> does not modify any CRDs that currently exist on the Kubernetes cluster.
      </p>
1. Package an updated version of your Helm chart by running the following command from
    the root level of your Helm chart directory:

     ```
     helm package .
     ```

     Verify that you now have a file named `CHART-NAME-#.#.#.tgz` in the root level of your Helm chart directory.

     <p class="note"><strong>Note:</strong> If you are updating multiple charts,
       run the above command for each updated chart.
     </p>

1. Update the service offering by running one of the following commands:
      <p class="note"><strong>Note:</strong>
        If you manually applied CRD changes to the cluster in step 3,
        you can safely ignore a CRD warning from <%= vars.product_short %>
        by adding the <code>--ignore-crd-warning</code> flag to the below commands.
      </p>
    + **If you are adding a single chart,** run:

        ```
        ksm offer save /PATH-TO-YOUR-CHART.tgz --update
        ```
        Where `PATH-TO-YOUR-CHART.tgz` is the name of the service offering you want to delete. <br><br>
    + **If you are adding a multiple charts,** run:

        ```
        ksm offer save /PATH-TO-KSM-DIRECTORY/ /PATH-TO-YOUR-CHART_1.tgz /PATH-TO-YOUR-CHART_2.tgz --update
        ```
        Where:
        + `PATH-TO-KSM-DIRECTORY/` is the path to the `ksm` directory that includes
            the `ksm.yaml` file for your service offering.
        + `PATH-TO-YOUR-CHART_1.tgz` is the path to a packaged chart you referenced in your `ksm.yaml` file.
        + `PATH-TO-YOUR-CHART_2.tgz` is the path to a packaged chart you referenced in your `ksm.yaml` file.


## <a id="upgrade-instance"></a> Upgrade a Service Instance

After you update your service offering,
ask developers to follow this procedure to upgrade their service instances.
For instructions for updating a service offering, see [Update a Service Offering](#update-offering) above.

To upgrade service instances:

1. Find the service instances that you can upgrade by running:

    ```
    cf services
    ```
    For example:
     <pre class="terminal">$ cf services
     name             service   plan    bound apps     last operation     broker                       upgrade available
     mysql-instance   mysql     small   spring-music   create succeeded   container-services-manager   true</pre>

     Service instances that are available for upgrade have `true` under the `upgrade available` column.

1. Upgrade the service instance by running:

     ```
     cf update-service SERVICE-INSTANCE-NAME -u
     ```
1. Check the status of your service instance and watch for completion by running:

    ```
    watch cf services
    ```
    For example:
  <pre class="terminal">$ watch cf services
   Getting services in org my-org / space my-space as user...
   OK
   name             service   plan    bound apps     last operation     broker                       upgrade available
   mysql-instance   mysql     small   spring-music   upgrade succeeded  container-services-manager
 </pre>
   Service instances are upgraded asynchronously.
   Wait for the `last operation` for your instance to show as `create succeeded`.

## <a id="delete"></a> Delete a Service Offering

 <p class="note"><strong>Note:</strong>
   <%= vars.product_short %> does not permit deleting service offerings if service instances of that offering exist.
   This is because if an offering was deleted while service instances of the offering existed,
   you could not do operations against that service instance.
   For example, you could not run <code>cf update-service</code>.
</p>

To delete a service offering:

1. If service instances of the service offering exist, for each service instance,
delete the instance by running:

    ```
    cf delete-service SERVICE-NAME
    ```

1. Delete a service offering by running:

    ```
    ksm offer delete YOUR-CHART
    ```
    Where `YOUR-CHART` is the name of the service offering you want to delete.

    <p class="note"><strong>Note:</strong> If you only have one service offering in
      <%= vars.product_short %>, you cannot delete it.
    </p>
